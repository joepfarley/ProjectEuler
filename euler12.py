"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
""" 

'''
First I need to generate an algorthm that checks triangle numbers. 
Then I need to find an algorthm that generates factors minus the number's self
then count the factors

then create a routine that finds a triangle number and then checks all factors. 
(in other words, put them together. )


'''
from math import sqrt

def tri(n):
	return ((n+1)*(n)/2);

def triangle(n):
	x = (sqrt(8*n + 1) - 1) / 2
	if x - int(x) > 0: # if x is not an integer
		return 0
	else:
		return 1


def factor(x):
	l=[]
	for i in range(2,int(sqrt(tri(x)))+1):
		if x%i==0:
			l.append(i)
	return l




def stopIfOverFactor(x):
	b=0
	while len(factor(b))<x:
		b=b+1
	return tri(b),len(factor(b)),factor(b)
		

print stopIfOverFactor(25)

